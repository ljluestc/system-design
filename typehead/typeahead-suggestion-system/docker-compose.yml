version: "3.8"

services:
  # Application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    depends_on:
      - mongo
      - redis
    environment:
      - NODE_ENV=production
      - PORT=3001
    volumes:
      - ./:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB service
  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis service
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --requirepass redis_pass
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx service for load balancing
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongo-data:
  redis-data:

/*
  Expansion Notes:
  - Add detailed comments for each service (10-15 lines per section).
  - Include additional services (e.g., Kafka, monitoring tools like Prometheus).
  - Add environment variables for all services (e.g., logging levels, API keys).
  - Specify resource limits (CPU, memory) for each service.
  - Add network configurations (e.g., custom bridge network).
  - Include logging configurations (e.g., log drivers, options).
  - Repeat healthcheck blocks with variations (e.g., different tests).
  - Add extensive documentation inline (e.g., usage instructions).
  - Include version-specific comments for compatibility.
*/